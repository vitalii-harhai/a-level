# Задача 2. Бриллиант

# стандартная проверка на нечетность
count = 1  # здесь считаем количество попыток ввода числа (ради прикола)
while True:
    user_number = int(input('Enter the odd number: '))  # ждем цифру от пользователя и переводим ее в integer
    if user_number % 2:  # если есть остаток от деления на 2, те нечетное число - выходим и работаем с этой переменной
        break
    elif count > 2:  # больше двух раз ввели неправильно и пишем учи матчасть!
        print('Это такое число, которое делится с остатком на 2!')
    else:  # если нет остатка от деления на 2 это четное, возвращаемся к началу цикла, цикл то бесконечный и количество попыток увеличиваем на 1
        print('Enter нечетное число!!!!')
        count += 1

# ВАРИАНТ 1 с помощью флага Reverse (находим самую большую линию, это введенное число, и считаем вниз)
# Пробелы считаем число - количество звездочек и делим на 2
# ЧИСЛО ВВЕДЕНО 7
star = 1  # это количество звездочек
reverse = False  # это так называемый флаг состояние False считаем 1, 3, 5, 7 состояние изменилось на True те реверс (обратно) - Да! считаем 7, 5, 3, 1

for i in range(1, user_number + 1):  # range-ем получаем 1, 2, 3, 4, 5, 6, 7, 8 берем конец на 1 больше чтобы получить последнюю звездочку
    # считаем пробелы по бокам первое число 1, (7 - 1) = 6 слева 3 пробела и справа 3 пробела, второе число 3, (7 - 3) = 4 слева 2 пробела и справа 2 пробела
    space = int((user_number - star) / 2)  # но нас интересует только левая сторона поэтому здесь будет 3, 2, 1, 0
    print(f"{' ' * space}{'*' * star}")  # выводим форматной строкой 1 звездочка = 3 пробела звездочка, 3 звездочки = 2 пробела и 3 звездочки
    if not reverse:  # если реверса нет считаем вверх
        star += 2  # а вот здесь увеличиваем от 1 до нашей цифры 7 нечетными цифрами
    else:  # если реверс считаем вниз
        star -= 2  # а вот здесь уменьшаем от нашей цифры 7 до 1 нечетными цифрами
    if star == user_number:  # ситуация star стало равно нашей цифре 7, даем команду обратно!
        reverse = True
# подводим итоги - range нам дает 1, 2, 3, 4, 5, 6, 7, 8 (мы кстати нигде переменную i не использовали)
# а переменная star 1, 3, 5, 7, 5, 3, 1
# ПЕРЕКЛЮЧЕНИЕ - на количестве символов *


# ВАРИАНТ 2 с помощью нахождения средней линии (находим среднюю линия и считаем вниз)
# Пробелы считаем с помощью метода строки center и передаем туда ширину строки т.е. наше число
# теперь введенное число будем считать 5

hash_tag = 1  # будем использовать

for i in range(1, user_number + 1):
    # строку со spase я удаляю она не нужна, пробелы нам считать не нужно
    # spase = int(user_number - hash_tag)
    draw_line = hash_tag * '#'  # наша линия с решетками # - те 1 3 5 3 1
    # выводим нашу линию с решетками # используя метод строки center куда передаем ширину строки (она постоянно неизменна = 5)
    # этот метод выводит по центру символ решетки # (3 пробела 1 решетка 3 пробела) (2 пробела 3 решетки 2 пробела) (0 пробелов 5 решеток 0 пробелов)
    # и если бы у нас ширина строки была бы четной то по центру не получилось бы вывести
    print(draw_line.center(user_number))
    if i < (user_number + 1) / 2:  # здесь мы ищем среднюю самую большую линию но в range(1, 2, 3, 4, 5, 6) это линия 3
        # доходим до линии 3 наш счетчик hash_tag равен 5 (1 итерация i=1 hash_tag=1) (2 итерация i=2 hash_tag=3) (3 итерация i=3 hash_tag=5)
        # дошли до линии 3 и считаем вниз
        hash_tag += 2  # добавляем постоянно 2 чтобы получать нечетные числа 1, 3, 5
    else:
        hash_tag -= 2  # уменьшаем постоянно на 2 чтобы получать нечетные числа 5, 3, 1

# подводим итоги - range нам дает 1, 2, 3, 4, 5, 6
# а переменная hash_tag 1, 3, 5, 3, 1
# ПЕРЕКЛЮЧЕНИЕ - на средней строке
